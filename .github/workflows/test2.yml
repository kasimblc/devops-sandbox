name: Staging Deployment

on: [push]

jobs:
  deploy-staging:
    name: "Deploy Staging Environments"
    runs-on: windows-latest
    env:
      # Dikkat: STAGING_SERVERS değeri string olarak tanımlandı!
      STAGING_SERVERS: '["staging-1", "staging-2", "staging-3", "staging-4"]'
    outputs:
      matrix_env: ${{ steps.define_matrix.outputs.matrix_env }}
    steps:
      - name: Tanımlı Staging Sunucularını Ayarla
        id: define_matrix
        shell: pwsh
        run: |
          # Giriş değeri; örneğin "all" ya da belirli bir sunucu adı bekleniyor.
          $env_input = "${{ github.event.inputs.environment }}"
          if ($env_input -eq "all") {
            # $env:STAGING_SERVERS zaten JSON formatında tanımlı!
            "matrix_env=$($env:STAGING_SERVERS)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8
          } else {
            # Tek bir environment değeri için JSON array oluşturuyoruz
            $single_env = "[\"$env_input\"]"
            "matrix_env=$single_env" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8
          }

      - name: Debug Matrix Çıktısı
        run: |
          echo "Matrix Env: ${{ steps.define_matrix.outputs.matrix_env }}"

  deploy-instances:
    needs: deploy-staging
    runs-on: windows-latest
    strategy:
      max-parallel: 1  # Paralel çalışmayı önler; işlemleri sırayla yapar.
      matrix:
        environment: ${{ fromJson(needs.deploy-staging.outputs.matrix_env) }}
    steps:
      - name: Test Deploy - ${{ matrix.environment }}
        shell: pwsh
        run: |
          Write-Output "Test Mode - Deploying to ${{ matrix.environment }} with action ${{ github.event.inputs.action }}"
