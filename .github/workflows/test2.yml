name: Staging Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: >
          Deployment Environment.
          'all' → tüm staging deploy'ları çalışır,
          'staging-1', 'staging-2' gibi spesifik değerler.
        required: true
        default: "all"
        type: string
      action:
        description: "What action would you like to perform?"
        required: true
        default: "deploy"
        type: choice
        options:
          - deploy
          - rollback

jobs:
  deploy-staging:
    name: "Deploy Staging Environments"
    runs-on: ubuntu-latest
    # GitHub Environment'da tanımlı STAGING_EXAMPLE_1 kullanılıyor
    environment: STAGING_EXAMPLE_1
    outputs:
      matrix_env: ${{ steps.define_matrix.outputs.matrix_env }}
    steps:
      - name: Set matrix environment
        id: define_matrix
        run: |
          if [ "${{ github.event.inputs.environment }}" == "all" ]; then
            # GitHub Environment içinde STAGING_SERVERS olarak tanımlı virgülle ayrılmış string'i JSON array'e çeviriyoruz.
            json_array=$(echo "[\"$(echo "$STAGING_SERVERS" | sed 's/,/","/g')\"]")
            echo "matrix_env=$json_array" >> $GITHUB_OUTPUT
          else
            echo "matrix_env=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
          fi

  deploy-instances:
    needs: deploy-staging
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1  # İşlemleri sırayla çalıştırır.
      matrix:
        environment: ${{ fromJson(needs.deploy-staging.outputs.matrix_env) }}
    steps:
      - name: Test Deploy - ${{ matrix.environment }}
        run: echo "Test Mode - Deploying to ${{ matrix.environment }} with action ${{ github.event.inputs.action }}"
