# ===================================================================================
# Base Staging CI/CD Pipeline
# Tüm firmalar için ortak staging pipeline şablonu
# Özel firmalar için başka YAML dosyaları oluşturulabilir ve bu base dosyayı içeri alarak kullanabilirler.
# ===================================================================================

name: Base Staging CI/CD

on:
  workflow_call:  # Başka YAML dosyaları bunu çağırarak içeri alabilir
    inputs:
      environment:
        required: true  # Ortam bilgisi zorunludur
        type: string
        default: "all"  # Varsayılan olarak 'all' seçeneği seçilir, tüm staging sunucularına deploy yapılır
      action:
        required: true  # Yapılacak işlem bilgisi zorunludur
        type: string
        default: "deploy"  # Varsayılan işlem 'deploy' olarak belirlenmiştir
      STAGING_SERVERS:
        required: true  # Staging sunucularının listesi zorunludur
        type: string
        default: '["staging-1", "staging-2", "staging-3", "staging-4"]'  # Varsayılan staging sunucuları

# ====================================================================
# Staging Matrix Oluşturma
# Kullanıcının seçtiği ortam değerine göre hedef sunucu listesini belirler.
# "all" → Tüm sunucular seçilir, belirli bir isim → Sadece o sunucu.
# ====================================================================

jobs:
  staging-jobs:
    name: "Create Staging Matrix"
    runs-on: windows-latest
    outputs:
      # Burada oluşturulan matrix_env çıktısı, bir sonraki job (staging-instances) tarafından kullanılacaktır.
      matrix_env: ${{ steps.define_matrix.outputs.matrix_env }}
    steps:
      - name: Define Available Staging Servers  # Staging sunucularını belirle
        id: define_matrix
        shell: pwsh
        run: |
          $environment = "${{ inputs.environment }}"
          $allowedEnvironments = ${{ inputs.STAGING_SERVERS }} | ConvertFrom-Json

          if ($environment -eq "all") {
            # Deploy to all environments / Tüm ortamlar için deploy
            $output = "matrix_env=" + ${{ inputs.STAGING_SERVERS }}
            Write-Output "Output: $output"
            Out-File -FilePath $env:GITHUB_OUTPUT -InputObject $output -Append
          }
          elseif ($allowedEnvironments -contains $environment) {
            # Deploy to a specific environment / Belirtilen ortama deploy
            $output = "matrix_env=[" + '"' + $environment + '"' + "]"
            Write-Output "Output: $output"
            Out-File -FilePath $env:GITHUB_OUTPUT -InputObject $output -Append
          }
          else {
            # Error handling for invalid environments / Geçersiz ortamlar için hata kontrolü
            Write-Error "Invalid environment: $environment. Allowed values are 'all' or one of: $($allowedEnvironments -join ', ')"
          }

# ===============================================================================
# Staging Deployment İşlemi
# Matrix ile oluşturulan sunucular için dağıtım işlemini gerçekleştirir.
# ===============================================================================

  staging-instances:
    needs: staging-jobs  # Bu job'un başlaması için staging-jobs'un tamamlanması gerekiyor.
    runs-on: windows-latest
    strategy:
      max-parallel: 1  # Paralel çalışmayı önler, işlemleri sırayla çalıştırır. (Öncelikli olarak sıralı çalıştırma gerektiren işlemler için)
      matrix:
        environment: ${{ fromJson(needs.staging-jobs.outputs.matrix_env) }}  # Önceki job'un çıktısındaki environment değerlerini alır.
    steps:
      - name: ${{ matrix.environment }} - ${{ inputs.action }}  # İşlem yapılacak hedef ortam ve işlem türü
        shell: pwsh
        run: |
          Write-Output "Deploying to ${{ matrix.environment }} with action ${{ inputs.action }}"
