name: Base Staging Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: "Hedef staging environment (ör. 'all', 'staging-1', 'staging-2', ...)"
        required: true
        type: string
      action:
        description: "Gerçekleştirilecek işlem (deploy, rollback, first-setup)"
        required: true
        type: string
      secrets:
        # Gerekli secret'larınızı burada tanımlayabilirsiniz.
        # Örnek: DEPLOY_TOKEN: {}
      
jobs:
  staging-jobs:
    name: "Create Staging Matrix"
    runs-on: windows-latest
    env:  
      # Staging sunucularını buradan güncelleyebilirsiniz.
      STAGING_SERVERS: '["staging-1", "staging-2", "staging-3", "staging-4"]'
    outputs:
      matrix_env: ${{ steps.define_matrix.outputs.matrix_env }}
    steps:
      - name: Define Available Staging Servers
        id: define_matrix
        shell: pwsh
        run: |
          $environment = "${{ inputs.environment }}"
          Write-Output "Using environment: $environment"
          
          # STAGING_SERVERS ortam değişkenini JSON dizisine dönüştürüyoruz.
          $allowedEnvironments = $env:STAGING_SERVERS | ConvertFrom-Json
          
          if ($environment -eq "all") {
            # Tüm ortamlara deploy yapılacak
            $output = "matrix_env=" + $env:STAGING_SERVERS
            Write-Output "Output: $output"
            Out-File -FilePath $env:GITHUB_OUTPUT -InputObject $output -Append
          }
          elseif ($allowedEnvironments -contains $environment) {
            # Sadece belirtilen ortama deploy yapılacak
            $output = "matrix_env=[" + '"' + $environment + '"' + "]"
            Write-Output "Output: $output"
            Out-File -FilePath $env:GITHUB_OUTPUT -InputObject $output -Append
          }
          else {
            Write-Error "Invalid environment: $environment. Allowed values are 'all' or one of: $($allowedEnvironments -join ', ')"
          }

  staging-instances:
    name: "Execute Action on Staging Instances"
    needs: staging-jobs
    runs-on: windows-latest
    strategy:
      max-parallel: 1  # İşlemlerin sırayla çalışması için
      matrix:
        environment: ${{ fromJson(needs.staging-jobs.outputs.matrix_env) }}
    steps:
      - name: ${{ matrix.environment }} - ${{ inputs.action }}
        shell: pwsh
        run: |
          Write-Output "Test Mode - Deploying to --- ${{ matrix.environment }} --- with action --- ${{ inputs.action }} ---"
