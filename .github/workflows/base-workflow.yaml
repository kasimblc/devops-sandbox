# ===================================================================================
# Base CI/CD Workflow
# Firmalar için yeni YAML dosyaları oluşturulabilir ve bu tabandan kalıtım yaparak kullanabilirsin.
# Base CI/CD Workflow
# New YAML files can be created for companies and you can use them by inheriting from this base.
# ===================================================================================

name: Base Workflow

on:
  workflow_call:  # Başka YAML dosyaları bunu çağırarak içeri alabilir // Other YAML files can include this by calling it
    inputs:
      ENVIRONMENT:
        required: true  # Ortam bilgisi zorunludur // Environment information is mandatory
        type: string
        default: "all"  # Varsayılan olarak 'all' seçeneği seçilir, tüm hedef sunuculara işlem uygulanır // Default 'all' option is selected, applies to all target servers
      ACTION:
        required: true  # Yapılacak işlem bilgisi zorunludur // Action information is mandatory
        type: string
        default: "deploy"  # Varsayılan işlem 'deploy' olarak belirlenmiştir // Default action is set to 'deploy'
      TARGET_SERVERS:
        required: true  # Hedef sunucuların listesi zorunludur // List of target servers is mandatory
        type: string
        default: '["server-1","server-2","server-3"]'  # Varsayılan hedef sunucular // Default target servers
      DOWNLOAD_ARTIFACT:
        required: true
        type: string  # Boolean yerine string kullanılacak
        default: "true"  # Varsayılan olarak "true" seçeneği seçilir
      CONFIG_FILE_NAME:
        required: true
        default: "arguments.yaml"
        type: string

# ====================================================================
# Workflow Matrix Oluşturma
# Kullanıcının seçtiği ortam değerine göre hedef sunucu listesini belirler. "all" → Tüm sunucular seçilir, belirli bir isim → Sadece o sunucu.
# Creating Workflow Matrix
# Determines the target server list based on the environment value selected by the user. "all" → Selects all servers, specific name → Only that server.
# ====================================================================

jobs:
  checkout-download:
    name: "Checkout && Download"
    runs-on: windows-latest
    steps:
      - name: Checkout Deploy Repository
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Checkout Base Repository
        shell: pwsh  # PowerShell kullanılarak komutlar çalıştırılır // Commands will be executed using PowerShell
        run: |
          Write-Output "Checkout Base Repository"

      - name: Download Artifact
        if: ${{ github.event.inputs.DOWNLOAD_ARTIFACT == 'true' }}
        shell: pwsh  # PowerShell kullanılarak komutlar çalıştırılır // Commands will be executed using PowerShell
        run: |
          Write-Output "Download Artifact"

      - name: Debug - List Files
        run: Get-ChildItem -Recurse | Select-String "operationController.ps1"
        shell: pwsh

  create-matrix:
    needs: checkout-download
    name: "Create Matrix"
    runs-on: windows-latest  # İş akışı Windows işletim sistemi üzerinde çalışacak // Workflow will run on Windows operating system
    outputs:
      # Burada oluşturulan matrix_env çıktısı, bir sonraki job (execute-matrix) tarafından kullanılacaktır.
      # The matrix_env output created here will be used by the next job (execute-matrix).
      matrix_env: ${{ steps.define_matrix.outputs.matrix_env }}
    steps:
      - name: Determine Target Environments  # Hedef sunucuları belirle // Determine target servers
        id: define_matrix
        shell: pwsh  # PowerShell kullanılarak komutlar çalıştırılır // Commands will be executed using PowerShell
        run: |
          # Kullanıcıdan alınan ortam değişkenleri (inputs üzerinden)
          $environment = "${{ inputs.ENVIRONMENT }}"  # Kullanıcıdan gelen ortam bilgisi // Environment value from user
          $allowedEnvironments = '${{ inputs.TARGET_SERVERS }}' # JSON string olarak gelen değeri diziye çevir // Convert input string to array
          
          if ($environment -eq "all") {
            # "all" seçilmişse tüm ortamlar seçilir // If "all" is selected, all environments will be included
            $matrix = $allowedEnvironments
          }
          elseif ($allowedEnvironments -contains $environment) {
            # Belirtilen tek bir ortam seçilmişse onu matrise ekle // If a single environment is selected, add it to matrix
            $matrix = '["' + $environment + '"]'
          }
          else {
            # Geçersiz ortamlar için hata mesajı göster // Show error message for invalid environments
            Write-Error " Invalid environment: '$environment'. Allowed values are 'all' or one of: $($allowedEnvironments -join ', ')"
            exit 1  # CI/CD'nin başarısız olması için çıkış kodu gönder // Exit with error code to fail the CI/CD
          }

          # Matris çıktısını GitHub Actions değişkenlerine yazdır // Write matrix output to GitHub Actions variables
          "matrix_env=$matrix" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

          # Debug amaçlı çıktıyı göster // Show output for debugging
          Write-Output " Matrix Generated: $matrix"

# ===============================================================================
# Matrix ile oluşturulan sunucular için işlem gerçekleştirilir.
# Executes the task on the servers created with the matrix.
# ===============================================================================

  execute-matrix:
    needs: create-matrix  # Bu job'un başlaması için create-matrix'in tamamlanması gerekiyor // This job needs create-matrix to complete first.
    name: "Matrix"
    runs-on: windows-latest  # İş akışı Windows işletim sistemi üzerinde çalışacak // Workflow will run on Windows operating system
    strategy:
      max-parallel: 1  # Paralel çalışmayı önler, işlemleri sırayla çalıştırır. // Prevents parallel execution, ensures tasks run sequentially.
      # (Öncelikli olarak sıralı çalıştırma gerektiren işlemler için) // (Especially for tasks that need to be run sequentially)
      matrix:
        environment: ${{ fromJson(needs.create-matrix.outputs.matrix_env) }}  # Önceki job'un çıktısındaki environment değerlerini alır // Gets environment values from the output of the previous job.
    steps:
      - name: ${{ matrix.environment }} - ${{ inputs.ACTION }}  # İşlem yapılacak hedef ortam ve işlem türü // Target environment and action type
        shell: pwsh
        run: |
          Write-Output "Geçerli Çalışma Dizini:"
          Get-Location
          Write-Output $PWD
      
          Write-Output "scripts klasörüne geçiliyor..."
          Set-Location -Path "$PWD/scripts"
      
          Write-Output "scripts dizinindeki dosyalar:"
          Get-ChildItem -Path "$PWD"
      
          # operationController.ps1 dosyasını argümanla çalıştırıyoruz
          Write-Output "operationController.ps1 dosyası çalıştırılıyor..."
          .\operationController.ps1 -serverId "firma-1-staging-1"

